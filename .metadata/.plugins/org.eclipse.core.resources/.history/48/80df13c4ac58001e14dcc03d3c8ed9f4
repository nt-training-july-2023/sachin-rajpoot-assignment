package com.gms.demo.controller;

import com.gms.demo.entity.Status;
import com.gms.demo.entity.TicketType;
import com.gms.demo.payloads.ApiResponse;
import com.gms.demo.payloads.TicketDto;
import com.gms.demo.payloads.TicketGetAllOutDto;
import com.gms.demo.payloads.TicketOutDto;
import com.gms.demo.payloads.TicketUpdateStatusInDto;
import com.gms.demo.service.TicketService;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * The TicketController class handles API endpoints related to ticket
 * operations. This controller provides functionality for creating and
 * retrieving tickets.
 */
@RestController
@RequestMapping("/api/ticket/")
public class TicketController {

	/**
	 * The Ticket Service instance for handling ticket-related operations.
	 */
	@Autowired
	private TicketService ticketService;

	/**
	 * Creates a new ticket associated with a member and a department.
	 *
	 * @param ticketDto    The data transfer object containing ticket information.
	 * @param memberId     The ID of the member associated with the ticket.
	 * @param departmentId The ID of the department associated with the ticket.
	 * @return ResponseEntity containing the newly created TicketOutDto with HTTP
	 *         status 201 (Created).
	 */
	@CrossOrigin
	@PostMapping("create/memberId/{memberId}/departmentId/{departmentId}")
	public ResponseEntity<?> createTicket(@Valid @RequestBody final TicketDto ticketDto,
			@PathVariable final Integer memberId, @PathVariable final Integer departmentId) {
		System.out.println("INSIDE CREATE MEMBER");
		System.out.println(ticketDto.getStatus().equals(Status.OPEN));
		if (ticketDto == null)
			return new ResponseEntity<>("Data Cannot be Null", HttpStatus.BAD_REQUEST);
		if (!ticketDto.getStatus().equals(Status.CLOSED) || !ticketDto.getStatus().equals(Status.OPEN)
				|| !ticketDto.getStatus().equals(Status.PROGRESS))
			return new ResponseEntity<>("Status can only be OPEN, PROGRESS OR CLOSED", HttpStatus.BAD_REQUEST);
		if (!ticketDto.getTicketType().equals(TicketType.FEEDBACK)
				|| !ticketDto.getTicketType().equals(TicketType.GRIEVANCE))
			return new ResponseEntity<>("Ticket Type can oly be FEEDBACK OR GRIEVANCE", HttpStatus.BAD_REQUEST);
		return new ResponseEntity<>(this.ticketService.createTicket(ticketDto, memberId, departmentId),
				HttpStatus.CREATED);
	}

	@CrossOrigin
	@GetMapping("getAll/auth/memberId/{memberId}/filter/{filter}/pageNumber/{pageNumber}")
	public ResponseEntity<List<TicketGetAllOutDto>> getAllTicketAuth(@PathVariable Integer memberId,
			@PathVariable Status filter, @PathVariable Integer pageNumber,
			@RequestParam(required = false) boolean myTickets, @RequestParam(required = false) boolean adminDept) {
		System.out.println(myTickets + "          " + adminDept);
		return new ResponseEntity<>(
				this.ticketService.getAllTicketAuth(memberId, myTickets, filter, pageNumber, adminDept), HttpStatus.OK);
	}

	@CrossOrigin
	@PutMapping("update/ticketId/{ticketId}")
	public ResponseEntity<TicketOutDto> updateTicket(@Valid @RequestBody final TicketUpdateStatusInDto ticketDto,
			@PathVariable final Integer ticketId) {
		return new ResponseEntity<TicketOutDto>(this.ticketService.updateTicket(ticketDto, ticketId), HttpStatus.OK);

	}

	@CrossOrigin
	@GetMapping("getbyId/ticketId/{ticketId}")
	public ResponseEntity<TicketOutDto> getTicketById(@PathVariable @Valid Integer ticketId) {
		return new ResponseEntity<TicketOutDto>(this.ticketService.getTicketBtId(ticketId), HttpStatus.OK);
	}
}
