package com.gms.demo.repo;

import com.gms.demo.entity.Member;
import com.gms.demo.entity.Status;
import com.gms.demo.entity.Ticket;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

/**
 * The TicketRepo interface provides methods to perform CRUD (Create, Read, Update, Delete) operations
 * on Ticket entities in the database.
 *
 * It extends the JpaRepository interface, which provides out-of-the-box methods for interacting with the database.
 *
 */
public interface TicketRepo extends JpaRepository<Ticket, Integer> {

//	 @Query("SELECT t FROM Ticket t ORDER BY " +
//	           "CASE t.status " +
//	           "WHEN 'OPEN' THEN 1 " +
//	           "WHEN 'PROGRESS' THEN 2 " +
//	           "WHEN 'CLOSED' THEN 3 " +
//	           "ELSE 4 " +
//	           "END")
//	 Page<Ticket> getAllTicketsSortedByStatus(Pageable pageable);
	 
//	 Page<Ticket> findByStatus(Status status, Pageable pageable);
	
	 @Query("SELECT t FROM demogms.ticket t ORDER BY " +
    "CASE t.status " +
    "WHEN 'OPEN' THEN 1 " +
    "WHEN 'PROGRESS' THEN 2 " +
    "WHEN 'CLOSED' THEN 3 " +
    "ELSE 4 " +
    "END") 
	 Page<Ticket> findByMember(Member member, Pageable pageable);

//	Page<Ticket> findByMember(Member member, PageRequest of);
	 
	 
}
